# -*- coding: utf-8 -*-
"""pr_3_Danyliuk.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zfdP7sC-53ACQ0viWfymuSnQvN1SRZim

# I. Оператори порівняння та логічні оператори. Умови.

1. (5б) Створіть цілочисленну змінну зі своїм щасливим або улюбленим числом. Напишіть код, який би автоматизовував наступну задачу.

Якщо число парне, помножте його на 2 та виведіть результат на екран.

Але якщо число непарне, помножте його на 3 та додайте 1 і виведіть на екран.
"""

a=14

if a%2 == 0:
  res = a/2
else:
  res = a*3+1

print(res)

"""2. (9б) Створіть змінну, що посилається на список. Якщо список пустий, додайте будь-який елемент у кінець списку. Якщо ж ні, то нічого не робіть."""

list_empty = []
list_non_empty = [1,2]

def ex_2(example_list):
  if len(example_list) == 0:
    example_list.append("empty")
  return example_list

print("пустий:")
print(ex_2(list_empty))
print("не пустий:")
print(ex_2(list_non_empty))

"""3. (13б) Створіть рядок зі своїм імʼям латинкою. Напишіть код, який би автоматизовував наступну задачу.

Якщо в імені є літера "а"
 або "i", Виведіть на екран повідомлення "A or I is in the name".



Якщо в імені є літери "o" та "n", Виведіть на екран повідомлення "O and N is in the name".

Також якщо в імені немає літери "о", але є "n", Виведіть на екран повідомлення "Only N is in the name".

В решті випадків виведіть на екран повідомлення "There is no N in the name, but there might be O".

Зверніть увагу, що, наприклад, для імені "Antonina" буде виведено два повідомлення.
"""

name = "Yevheniia"
if "a" in name.lower() or "i" in name.lower():
    print("A or I is in the name")

if "o" in name.lower() and "n" in name.lower():
    print("O and N is in the name")

if "o" not in name.lower() and "n" in name.lower():
    print("Only N is in the name")

if "n" not in name.lower():
    print("There is no N in the name, but there might be O")

"""# II. Comprehensions.

4. (5б) Створіть список, використовуючи if (не if-else), range та comprehension.
"""

list_4ex= [x for x in range(51) if x % 5 == 0]

print(list_4ex)

"""5. (9б) Створіть словник, використовуючи dict comprehension, що містить if else. Коли слід використовувати comprehensions, а коли їх слід уникати?"""

num_dict = {x: "парне" if x % 2 == 0 else "непарне" for x in range(1, 21)}

print(num_dict)

"""Можна використовувати, коли логіка проста, щоб зменшитити кількість коду, але при важкій логіці код може стати нечитабельним

6. (9б) Створіть список з рядками та запишіть його у змінну. Створіть ще один список на основі попереднього, де кожен рядок буде містити тільки три перших заглавних символи. Наприклад: ['hello', 'i', 'dont', 'care'] -> ['HEL', 'I', 'DON', 'CAR']. Використання comprehensions обовʼязкове.
"""

words = ['hello', 'i', 'dont', 'care']
short_words = [word[:3].upper() for word in words]

print(short_words)

"""# III. Цикли.

7. (5б) Продемонструйте роботу циклу while. Не можна використовувати True для запуску циклу, щоб уникнути безкінечного циклу!
"""

a = 0

while a<=10:
  print(a,"* 9 =",a*9)
  a=a+1

"""8. (5б) Напишіть програму, яка виведе на екран непарні числа в діапазоні від 0 до 20 включно."""

for num in range(21):
    if num % 2 == 1:
        print(num)

num = 0
while num <= 20:
    if num % 2 == 1:
        print(num)
    num += 1

"""9. (13б) Створіть список з елементами булевого типу або None. Використовуючи цикли, отримайте в результаті список з кортежами, де перший елемент кортежу - індекс(ціле число), а другий елемент - відповідне значення з першого списку.

Наприклад, [True, True, None, False] -> [(0, True), (1, True), (2, None), (3, False)]
"""

val = [True, False, None, True, False, None]
result = []

for i in range(len(val)):
    result.append((i, val[i]))

print(result)

"""10. (9б) Створіть словник, де ключі - назви книжок, а значення - їхня кількість у наявності в Вашій міні-бібліотеці. Бібліотека має містити щонайменше 6 книжок (6 пар значень у словнику) і щонайбільше 10 (пар значень). Використовуючи цикли, оновіть словник (не створюйте новий) так, щоби кількість книг у наявності збільшилося на 5 кожної книги. Наприклад,
{'It': 3, 'Fault stars': 10, 'Bible': 17, 'Psychological romance': 4, 'Harry Potter': 13} -> {'It': 8, 'Fault stars': 15, 'Bible': 22, 'Psychological romance': 9, 'Harry Potter': 18}
"""

lib = {
    "1984": 1,
    "To Kill a Mockingbird": 2,
    "The Great Gatsby": 3,
    "Harry Potter and the Sorcerer’s Stone": 4,
    "Pride and Prejudice": 5,
    "The Catcher in the Rye": 6,
    "Jane Eyre": 7,
    "Animal Farm": 9
}

for book in lib:
    lib[book] += 5

print("Оновлена бібліотека:")
for book, count in lib.items():
    print(f"{book}: {count}")

"""11. (5б) Визначте цілочислену змінну n, що належить проміжку від 4 до 10 включно. Використовуючи цикли, виведіть в консоль наступний патерн.

#
##
###
####

... #*n

"""

n = 5

for i in range(1, n+1):
  print("#" *i)

"""12. (13б) Гра "Нумо вгадай".
Розробіть просту гру, де користувач має вгадати випадкове число від 1 до 100. Для генерації випадкового числа використовуйте функцію random.randint(a, b) (тут a та b включно). Для отримання числа з консолі використовуйте функцію input(), результат якої обовʼязково явно приведіть до типу int.

Підказка: використовуйте цикл while та умови if-else, щоб повідомити користувачу піказки (напр. "Більше", "Менше") поки користувач не вгадає. По завершенню виведіть кількість спроб, які знадобилися для вгадування.
"""

import random

num = random.randint(1, 100)
n_try = 0
end = False

print("Число загадане")

while end == False:
    guess = int(input("Введи свою відповідь: "))
    n_try += 1

    if guess < num:
        print("Більше!")
    elif guess > num:
        print("Менше!")
    else:
        print("Ти вгадав число",num,"за",n_try,"спроб")
        end = True

"""# Вітаю! Ви велика(ий) молодець, що впоралась(вся). Похваліть себе та побалуйте чимось приємним. Я Вами пишаюся."""
